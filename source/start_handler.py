from typing import Tuple

import apscheduler
from telegram import Update, KeyboardButtonRequestChat, KeyboardButtonRequestUser, KeyboardButton, ReplyKeyboardMarkup, \
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, Job

from config import RECEIVER_ID, ADD_REMIND, SHOW_MY_REMIND, CANCEL_ALL_MY_REMIND, END, SELECTING_ACTION


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    select_receiver_markup = await _create_select_receiver_markup(update)
    welcome_message_text = await _get_start_message(update, context.job_queue.jobs())
    receiver_id = context.user_data.get(RECEIVER_ID)
    receiver_message_text = await  _get_receiver_text(receiver_id)
    remind_control_markup = await _create_remind_control_markup()
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   reply_markup=remind_control_markup,
                                   parse_mode=ParseMode.HTML,
                                   text=welcome_message_text)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   reply_markup=select_receiver_markup,
                                   parse_mode=ParseMode.HTML,
                                   text=receiver_message_text)
    return str(SELECTING_ACTION)

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    await context.bot.send_message(context, chat_id=update.effective_chat.id, text="–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á", ReplyKeyboardMarkup=ReplyKeyboardRemove())
    return str(END)


async def _get_start_message(update:Update, jobs:Tuple["Job['APSJob']"]) -> str:
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    user_jobs = list(
        filter(lambda job: (job.user_id == user_id), jobs))
    jobs_count = len(user_jobs)

    text = (f"–ü—Ä–∏–≤–µ—Ç, {user_name}!!!"
            "\n----------------------------------------------------"
            "\n–Ø, –±–æ—Ç  —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"
            "\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>."
            "\n–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–µ—Ä–∏—Ç–µ /stop"
            "\n----------------------------------------------------"
            f"\n–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:{jobs_count}")
    return text

async def _get_receiver_text(receiver_id:int) -> str:
    receiver_text = (f"\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç:{receiver_id}."  if receiver_id is not None else "\n<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω</b>!!!")
    return  f"{receiver_text}"
async def _create_select_receiver_markup(update: Update) -> ReplyKeyboardMarkup:
    request_chat = KeyboardButtonRequestChat(request_id=update.effective_chat.id, chat_is_channel=False, chat_is_forum=False)
    request_user = KeyboardButtonRequestUser(request_id=update.effective_chat.id)
    button = KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", request_chat=request_chat)#, request_user=request_user)
    markup = ReplyKeyboardMarkup(keyboard=[[button]], one_time_keyboard=True)
    return markup

async def _create_remind_control_markup() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text="‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=str(ADD_REMIND))],
               [InlineKeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=str(SHOW_MY_REMIND))],
               [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=str(CANCEL_ALL_MY_REMIND))]]
    return InlineKeyboardMarkup(buttons)

